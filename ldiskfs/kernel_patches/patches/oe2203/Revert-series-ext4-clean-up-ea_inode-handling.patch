From bd0a990771a934482be48df02465c35917cbbba5 Mon Sep 17 00:00:00 2001
From: Xinliang Liu <xinliang.liu@linaro.org>
Date: Fri, 15 Dec 2023 08:39:35 +0000
Subject: [PATCH] Revert series "ext4: clean up ea_inode handling"

Revert series:
https://lore.kernel.org/all/20230524034951.779531-1-tytso@mit.edu/
Becuase it seems ploblematic with ldiskfs and stucks the sanity test suite.
See bug: https://gitee.com/src-openeuler/lustre/issues/I8OSQ4

Revert "ext4: add lockdep annotations for i_data_sem for ea_inode's"

This reverts commit a08ff710284c1970f93c69593d50f8cf82e74518.

Signed-off-by: Xinliang Liu <xinliang.liu@linaro.org>

Revert "ext4: disallow ea_inodes with extended attributes"

This reverts commit d1c9aab3dfe9db90715372106d4e6997e62ec66e.

Signed-off-by: Xinliang Liu <xinliang.liu@linaro.org>

Revert "ext4: set lockdep subclass for the ea_inode in ext4_xattr_inode_cache_find()"

This reverts commit 2f477b813221855823702277cca30d0a7f22675d.

Signed-off-by: Xinliang Liu <xinliang.liu@linaro.org>

Revert "ext4: add EA_INODE checking to ext4_iget()"

This reverts commit 2174f45d71dbc2f0cf9408e8a890b3dacd03399c.

Signed-off-by: Xinliang Liu <xinliang.liu@linaro.org>
---
 fs/ext4/ext4.h  |  5 +----
 fs/ext4/inode.c | 34 +++++-----------------------------
 fs/ext4/xattr.c | 41 +++++++++++++++++++++++++++++------------
 3 files changed, 35 insertions(+), 45 deletions(-)

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 25a6e1eb6811..210dcad8b82d 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -992,13 +992,11 @@ do {									       \
  *			  where the second inode has larger inode number
  *			  than the first
  *  I_DATA_SEM_QUOTA  - Used for quota inodes only
- *  I_DATA_SEM_EA     - Used for ea_inodes only
  */
 enum {
 	I_DATA_SEM_NORMAL = 0,
 	I_DATA_SEM_OTHER,
 	I_DATA_SEM_QUOTA,
-	I_DATA_SEM_EA
 };
 
 
@@ -2894,8 +2892,7 @@ typedef enum {
 	EXT4_IGET_NORMAL =	0,
 	EXT4_IGET_SPECIAL =	0x0001, /* OK to iget a system inode */
 	EXT4_IGET_HANDLE = 	0x0002,	/* Inode # is from a handle */
-	EXT4_IGET_BAD =		0x0004, /* Allow to iget a bad inode */
-	EXT4_IGET_EA_INODE =	0x0008	/* Inode should contain an EA value */
+	EXT4_IGET_BAD =		0x0004  /* Allow to iget a bad inode */
 } ext4_iget_flags;
 
 extern struct inode *__ext4_iget(struct super_block *sb, unsigned long ino,
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 412af3c5fde4..29ac7c77096d 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -4814,24 +4814,6 @@ static inline void ext4_inode_set_iversion_queried(struct inode *inode, u64 val)
 		inode_set_iversion_queried(inode, val);
 }
 
-static const char *check_igot_inode(struct inode *inode, ext4_iget_flags flags)
-
-{
-	if (flags & EXT4_IGET_EA_INODE) {
-		if (!(EXT4_I(inode)->i_flags & EXT4_EA_INODE_FL))
-			return "missing EA_INODE flag";
-		if (ext4_test_inode_state(inode, EXT4_STATE_XATTR) ||
-		    EXT4_I(inode)->i_file_acl)
-			return "ea_inode with extended attributes";
-	} else {
-		if ((EXT4_I(inode)->i_flags & EXT4_EA_INODE_FL))
-			return "unexpected EA_INODE flag";
-	}
-	if (is_bad_inode(inode) && !(flags & EXT4_IGET_BAD))
-		return "unexpected bad inode w/o EXT4_IGET_BAD";
-	return NULL;
-}
-
 struct inode *__ext4_iget(struct super_block *sb, unsigned long ino,
 			  ext4_iget_flags flags, const char *function,
 			  unsigned int line)
@@ -4840,7 +4822,6 @@ struct inode *__ext4_iget(struct super_block *sb, unsigned long ino,
 	struct ext4_inode *raw_inode;
 	struct ext4_inode_info *ei;
 	struct inode *inode;
-	const char *err_str;
 	journal_t *journal = EXT4_SB(sb)->s_journal;
 	long ret;
 	loff_t size;
@@ -4864,14 +4845,8 @@ struct inode *__ext4_iget(struct super_block *sb, unsigned long ino,
 	inode = iget_locked(sb, ino);
 	if (!inode)
 		return ERR_PTR(-ENOMEM);
-	if (!(inode->i_state & I_NEW)) {
-		if ((err_str = check_igot_inode(inode, flags)) != NULL) {
-			ext4_error_inode(inode, function, line, 0, err_str);
-			iput(inode);
-			return ERR_PTR(-EFSCORRUPTED);
-		}
+	if (!(inode->i_state & I_NEW))
 		return inode;
-	}
 
 	ei = EXT4_I(inode);
 	iloc.bh = NULL;
@@ -5143,9 +5118,10 @@ struct inode *__ext4_iget(struct super_block *sb, unsigned long ino,
 		ret = -EFSCORRUPTED;
 		goto bad_inode;
 	}
-	if ((err_str = check_igot_inode(inode, flags)) != NULL) {
-		ext4_error_inode(inode, function, line, 0, err_str);
-		ret = -EFSCORRUPTED;
+	if (is_bad_inode(inode) && !(flags & EXT4_IGET_BAD)) {
+		ext4_error_inode(inode, function, line, 0,
+				 "bad inode without EXT4_IGET_BAD flag");
+		ret = -EUCLEAN;
 		goto bad_inode;
 	}
 
diff --git a/fs/ext4/xattr.c b/fs/ext4/xattr.c
index d223fb41ecec..d8a5c27b834b 100644
--- a/fs/ext4/xattr.c
+++ b/fs/ext4/xattr.c
@@ -123,11 +123,7 @@ ext4_expand_inode_array(struct ext4_xattr_inode_array **ea_inode_array,
 #ifdef CONFIG_LOCKDEP
 void ext4_xattr_inode_set_class(struct inode *ea_inode)
 {
-	struct ext4_inode_info *ei = EXT4_I(ea_inode);
-
 	lockdep_set_subclass(&ea_inode->i_rwsem, 1);
-	(void) ei;	/* shut up clang warning if !CONFIG_LOCKDEP */
-	lockdep_set_subclass(&ei->i_data_sem, I_DATA_SEM_EA);
 }
 #endif
 
@@ -401,7 +397,7 @@ static int ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino,
 		return -EFSCORRUPTED;
 	}
 
-	inode = ext4_iget(parent->i_sb, ea_ino, EXT4_IGET_EA_INODE);
+	inode = ext4_iget(parent->i_sb, ea_ino, EXT4_IGET_NORMAL);
 	if (IS_ERR(inode)) {
 		err = PTR_ERR(inode);
 		ext4_error(parent->i_sb,
@@ -409,6 +405,23 @@ static int ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino,
 			   err);
 		return err;
 	}
+
+	if (is_bad_inode(inode)) {
+		ext4_error(parent->i_sb,
+			   "error while reading EA inode %lu is_bad_inode",
+			   ea_ino);
+		err = -EIO;
+		goto error;
+	}
+
+	if (!(EXT4_I(inode)->i_flags & EXT4_EA_INODE_FL)) {
+		ext4_error(parent->i_sb,
+			   "EA inode %lu does not have EXT4_EA_INODE_FL flag",
+			    ea_ino);
+		err = -EINVAL;
+		goto error;
+	}
+
 	ext4_xattr_inode_set_class(inode);
 
 	/*
@@ -429,6 +442,9 @@ static int ext4_xattr_inode_iget(struct inode *parent, unsigned long ea_ino,
 
 	*ea_inode = inode;
 	return 0;
+error:
+	iput(inode);
+	return err;
 }
 
 /* Remove entry from mbcache when EA inode is getting evicted */
@@ -1487,11 +1503,11 @@ ext4_xattr_inode_cache_find(struct inode *inode, const void *value,
 
 	while (ce) {
 		ea_inode = ext4_iget(inode->i_sb, ce->e_value,
-				     EXT4_IGET_EA_INODE);
-		if (IS_ERR(ea_inode))
-			goto next_entry;
-		ext4_xattr_inode_set_class(ea_inode);
-		if (i_size_read(ea_inode) == value_len &&
+				     EXT4_IGET_NORMAL);
+		if (!IS_ERR(ea_inode) &&
+		    !is_bad_inode(ea_inode) &&
+		    (EXT4_I(ea_inode)->i_flags & EXT4_EA_INODE_FL) &&
+		    i_size_read(ea_inode) == value_len &&
 		    !ext4_xattr_inode_read(ea_inode, ea_data, value_len) &&
 		    !ext4_xattr_inode_verify_hashes(ea_inode, NULL, ea_data,
 						    value_len) &&
@@ -1501,8 +1517,9 @@ ext4_xattr_inode_cache_find(struct inode *inode, const void *value,
 			kvfree(ea_data);
 			return ea_inode;
 		}
-		iput(ea_inode);
-	next_entry:
+
+		if (!IS_ERR(ea_inode))
+			iput(ea_inode);
 		ce = mb_cache_entry_find_next(ea_inode_cache, ce);
 	}
 	kvfree(ea_data);
-- 
2.34.1

